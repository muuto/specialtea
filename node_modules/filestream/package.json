{
  "name": "filestream",
  "version": "4.0.0",
  "description": "W3C File Reader API streaming interfaces",
  "main": "index.js",
  "scripts": {
    "test": "zuul -- test/*.js",
    "test-local": "zuul --local -- test/*.js",
    "gendocs": "gendocs > README.md"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DamonOehlman/filestream.git"
  },
  "keywords": [
    "w3c",
    "file",
    "filestream"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/DamonOehlman/filestream/issues"
  },
  "homepage": "https://github.com/DamonOehlman/filestream",
  "devDependencies": {
    "crel": "^2.1.8",
    "drag-and-drop-files": "0.0.1",
    "feature": "^1.0.0",
    "tape": "^4.0.0",
    "zuul": "^3.0.0"
  },
  "dependencies": {
    "extend.js": "0.0.2",
    "inherits": "^2.0.1",
    "typedarray-to-buffer": "^3.0.0"
  },
  "readme": "# filestream\n\nA streaming implementation for working with File objects in the browser.\n\n\n[![NPM](https://nodei.co/npm/filestream.png)](https://nodei.co/npm/filestream/)\n\n\n\n## Why\n\nBecause the implementations that I found really didn't cut the mustard :/\n\n## Example Usage\n\nDisplayed below is an example that uses simple file drag and drop.  Rather\nthan immediately displaying the file, the file is piped through a read\nstream into a write stream and then finally displayed in the browser.\n\n```js\nvar crel = require('crel');\nvar detect = require('feature/detect');\nvar dnd = require('drag-and-drop-files');\nvar img = crel('img');\nvar video = crel('video', { autoplay: true });\nvar FileReadStream = require('filestream/read');\nvar FileWriteStream = require('filestream/write');\n\nfunction upload(files) {\n  var queue = [].concat(files);\n\n  function sendNext() {\n    var writer = new FileWriteStream();\n    var next = queue.shift();\n\n    console.log('sending file');\n    new FileReadStream(next).pipe(writer).on('file', function(file) {\n      console.log('file created: ', file);\n      img.src = detect('URL').createObjectURL(file);\n      // video.src = detect('URL').createObjectURL(next);\n\n      if (queue.length > 0) {\n        sendNext();\n      }\n    });\n  }\n\n  sendNext();\n}\n\ndnd(document.body, upload);\n\ndocument.body.appendChild(crel('style', 'body, html { margin: 0; width: 100%; height: 100% }'));\ndocument.body.appendChild(img);\ndocument.body.appendChild(video);\n\n```\n\n## License(s)\n\n### MIT\n\nCopyright (c) 2015 Damon Oehlman <damon.oehlman@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "filestream@4.0.0",
  "dist": {
    "shasum": "456e3df8b1c7c148c1f84d34d5080932e63b4e86"
  },
  "_from": "filestream@",
  "_resolved": "https://registry.npmjs.org/filestream/-/filestream-4.0.0.tgz"
}
